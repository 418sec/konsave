#!/usr/bin/python3
#  _   ___  __
# | | | \ \/ /      Prayag Jain | Hax Guru
# | |_| |\  /       YouTube: https://youtube.com/c/haxguru
# |  _  |/  \       GitHub: https://github.com/Prayag2
# |_| |_/_/\_\      Email: prayagjain2@gmail.com
#

## IMPORT ##
import os, shutil, argparse
from zipfile import ZipFile, ZIP_DEFLATED, is_zipfile


## GLOBAL VARIABLES ##
HOME = os.path.expanduser('~')
CONFIG_DIR = os.path.join(HOME, '.config')
PROFILES_DIR = os.path.join(CONFIG_DIR, 'konsave/profiles')
folder_names = ['gtk-2.0', 'gtk-3.0', 'gtk-4.0', 'Kvantum', 'latte']
file_names = ['dolphinrc', 'konsolerc', 'kcminputrc', 'kdeglobals', 'kglobalshortcutsrc', 'klipperrc', 'krunnerrc', 'kscreenlockerrc', 'ksmserverrc', 'kwinrc', 'kwinrulesrc', 'plasma-org.kde.plasma.desktop-appletsrc', 'plasmarc', 'plasmashellrc', 'gtkrc', 'gtkrc-2.0', 'lattedockrc', 'breezerc', 'oxygenrc', 'lightlyrc', 'ksplashrc']
export_extension = '.knsv'


## FUNCTIONS ##
def mkdir(path):
    '''
    Creates directory if it doesn't exist
    '''
    if not os.path.exists(path):
        os.makedirs(path)


def restart_kde():
    '''
    Restarts
    '''
    os.system('plasmashell --replace > /dev/null 2>&1 & disown')

    print("Konsave: Profile applied successfully! Please log-out and log-in to see the changes completely!")


def check_error(func, *args):
    '''
    This function runs a function and checks if there are any errors.
    '''
    try:
        f = func(*args)
    except Exception as e:
        print(f"Konsave: {e}\nTry 'konsave -h' for more info!")
    else:
        return f


def list_profiles(list_of_profiles, length_of_lop):
    '''
    Lists all the created profiles
    '''

    # assert
    assert (os.path.exists(PROFILES_DIR) and length_of_lop != 0), "No profile found."

    # run
    print("Konsave profiles:")
    print(f"ID\tNAME")
    for i, item in enumerate(list_of_profiles):
        print(f"{i+1}\t{item}")


def save_profile(name, list_of_profiles):
    '''
    Saves necessary config files in ~/.config/konsave/profiles/<name>
    '''
    
    # assert
    assert (name not in list_of_profiles), "Profile with this name already exists"

    # run
    print("Konsave: Saving profile...")
    PROFILE_DIR = os.path.join(PROFILES_DIR, name)
    mkdir(PROFILE_DIR)
    
    for folder in folder_names:
        source = os.path.join(CONFIG_DIR, folder)
        if os.path.exists(source):
            shutil.copytree(source, f"{PROFILE_DIR}/{folder}")
    for file in file_names:
        source = os.path.join(CONFIG_DIR, file)
        if os.path.exists(source):
            shutil.copy(source, PROFILE_DIR)

    print('Konsave: Profile saved successfully!')


def apply_profile(id, list_of_profiles, length_of_lop):
    '''
    Applies profile of the given id
    '''
    
    # Lowering id by 1
    id -= 1

    # assert
    assert (length_of_lop != 0), "No profile saved yet."
    assert (id in range(length_of_lop)), "Profile not found :("

    # run
    name = list_of_profiles[id]
    PROFILE_DIR = PROFILES_DIR + name + '/'
    shutil.copytree(PROFILE_DIR, CONFIG_DIR, dirs_exist_ok=True)
    restart_kde()


def remove_profile(id, list_of_profiles, length_of_lop):
    '''
    Removes the specified profile
    '''

    # Lowering id by 1
    id -= 1

    # assert
    assert (id in range(length_of_lop)), "Profile not found."

    # run
    item = list_of_profiles[id]
    shutil.rmtree(os.path.join(PROFILES_DIR, item))
    print('Konsave: removed profile successfully')


def export(id, list_of_profiles, length_of_lop):
    '''
    It will export the specified profile as a ".knsv" file in the home directory
    '''
    # lowering id by 1
    id -= 1

    # assert
    assert (id in range(length_of_lop)), "Profile not found."

    # run
    item = list_of_profiles[id]
    PROFILE_DIR = os.path.join(PROFILES_DIR, item)
    EXPORT_PATH = os.path.join(HOME, item)

    # compressing the files as zip
    print("Exporting...")
    with ZipFile(EXPORT_PATH, 'w', ZIP_DEFLATED) as zip:
        for root, dirs, files in os.walk(PROFILE_DIR): 
            for file in files:
                zip.write(os.path.join(root, file))

    shutil.move(EXPORT_PATH, EXPORT_PATH + export_extension)

    print(f"Exported to {EXPORT_PATH}{export_extension}")


def import_profile(path):
    '''
    This will import an exported profile
    '''
    
    # assert
    assert (is_zipfile(path) and path[-5:] == export_extension), "Not a valid konsave file"
    assert (not os.path.exists(os.path.join(PROFILES_DIR, os.path.basename(path)))), "A profile with this name already exists"

    # run
    with ZipFile(path, 'r') as zip:
        zip.extractall('/')
    
    print("Profile successfully imported!")


## MAIN ##
def main():

    ## VARIABLES ##
    mkdir(PROFILES_DIR)
    list_of_profiles = os.listdir(PROFILES_DIR)
    length_of_lop = len(list_of_profiles)


    ## PARSER SETTINGS ##
    parser = argparse.ArgumentParser(
        prog = 'Konsave',
        epilog = "Please report bugs at https://www.github.com/prayag2/konsave"
    )

    ## ADDING ARGS ##
    parser.add_argument('-l', '--list', required = False, action = 'store_true', help='Lists created profiles')
    parser.add_argument('-s', '--save', required = False, type = str, help='Save current config as a profile', metavar = '<name>')
    parser.add_argument('-r', '--remove', required = False, type = int, help='Remove the specified profile', metavar = '<id>')
    parser.add_argument('-a', '--apply', required = False, type = int, help='Apply the specified profile', metavar = '<id>')
    parser.add_argument('-e', '--export-profile', required = False, type = int, help='Export a profile and share with your friends!', metavar = '<id>')
    parser.add_argument('-i', '--import-profile', required = False, type = str, help='Import a konsave file', metavar = '<path>')

    ## PARSING ARGS ##
    args = parser.parse_args()

    ## CHECKING FOR ARGUMENTS ##
    if args.list:
        check_error(list_profiles, list_of_profiles, length_of_lop)
    elif args.save != None:
        check_error(save_profile, args.save, list_of_profiles)
    elif args.remove != None:
        check_error(remove_profile, args.remove, list_of_profiles, length_of_lop)
    elif args.apply != None:
        check_error(apply_profile, args.apply, list_of_profiles, length_of_lop)
    elif args.export_profile != None:
        check_error(export, args.export_profile, list_of_profiles, length_of_lop)
    elif args.import_profile != None:
        check_error(import_profile, args.import_profile)
    else:
        parser.print_help()
            


## CALLING MAIN ##
if __name__ == '__main__':
    main()
