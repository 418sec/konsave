#!/usr/bin/python3
#  _   ___  __
# | | | \ \/ /      Prayag Jain | Hax Guru
# | |_| |\  /       YouTube: https://youtube.com/c/haxguru
# |  _  |/  \       GitHub: https://github.com/Prayag2
# |_| |_/_/\_\      Email: prayagjain2@gmail.com
#

## IMPORT ##
import sys, getopt, os, shutil, argparse


## GLOBAL VARIABLES ##
argv = sys.argv[1:]
home = os.path.expanduser('~')
config_dir = home + '/.config/'
profiles_dir = home + '/.config/konsave/profiles/'
list_of_profiles = ''
length_of_lop = 0
folder_names = ['gtk-2.0', 'gtk-3.0', 'gtk-4.0', 'Kvantum', 'latte']
file_names = ['dolphinrc', 'konsolerc', 'kcminputrc', 'kdeglobals', 'kglobalshortcutsrc', 'klipperrc', 'krunnerrc', 'kscreenlockerrc', 'ksmserverrc', 'kwinrc', 'kwinrulesrc', 'plasma-org.kde.plasma.desktop-appletsrc', 'plasmarc', 'plasmashellrc', 'gtkrc', 'gtkrc-2.0', 'lattedockrc', 'breezerc', 'oxygenrc', 'lightlyrc', 'ksplashrc']


## FUNCTIONS ##
def mkdir(path):
    '''
    Creates directory if it doesn't exist
    '''
    if not os.path.exists(path):
        os.makedirs(path)


def restart_kde():
    '''
    Restarts
    '''
    os.system('plasmashell --replace > /dev/null 2>&1 & disown')

    print("Konsave: Profile applied successfully! Please log-out and log-in to see the changes completely!")


def check_error(func, *args):
    '''
    This function runs a function and checks if there are any errors.
    '''
    try:
        f = func(*args)
    except Exception as e:
        print(f"Konsave: {e}\nTry 'konsave -h' for more info!")
    else:
        return f


# def print_msg(message, include_help=True):
#     '''
#     Prints a message with help info
#     '''
#     print(f"Konsave: {message.lower()}")
#     if include_help:
#         print("Try 'konsave -h' for more info!")


def list_profiles():
    '''
    Lists all the created profiles
    '''

    # assert
    assert (os.path.exists(profiles_dir) and length_of_lop != 0), "No profile found."

    # run
    print("Konsave profiles:")
    print(f"ID\tNAME")
    for i, item in enumerate(list_of_profiles):
        print(f"{i+1}\t{item}")


def save_profile(name):
    '''
    Saves necessary config files in ~/.config/konsave/profiles/<name>
    '''
    
    # assert
    assert (name not in list_of_profiles), "Profile with this name already exists"

    # run
    print("Konsave: Saving profile...")
    profile_dir = os.path.join(profiles_dir, name)
    mkdir(profile_dir)
    
    for folder in folder_names:
        source = os.path.join(config_dir, folder)
        if os.path.exists(source):
            shutil.copytree(source, f"{profile_dir}/{folder}")
    for file in file_names:
        source = os.path.join(config_dir, file)
        if os.path.exists(source):
            shutil.copy(source, profile_dir)

    print('Konsave: Profile saved successfully!')


def apply_profile(id):
    '''
    Applies profile of the given id
    '''
    
    # Lowering id by 1
    id -= 1

    # assert
    assert (length_of_lop != 0), "No profile saved yet."
    assert (id in range(length_of_lop)), "Profile not found :("

    # run
    name = list_of_profiles[id]
    profile_dir = profiles_dir + name + '/'
    shutil.copytree(profile_dir, config_dir, dirs_exist_ok=True)
    restart_kde()


def remove_profile(id):
    '''
    Removes the specified profile
    '''

    # Lowering id by 1
    id -= 1

    # assert
    assert (id in range(length_of_lop)), "Profile not found."

    # run
    item = list_of_profiles[id ]
    shutil.rmtree(profiles_dir + item)
    print('Konsave: removed profile successfully')


## MAIN ##
def main():

    ## GLOBALS ##
    global list_of_profiles, length_of_lop
    mkdir(profiles_dir)
    list_of_profiles = os.listdir(profiles_dir)
    length_of_lop = len(list_of_profiles)


    ## PARSER SETTINGS ##
    parser = argparse.ArgumentParser(
        prog = 'Konsave',
        epilog = "Please report bugs at https://www.github.com/prayag2/konsave"
    )

    ## ADDING ARGS ##
    parser.add_argument('-l', '--list', required = False, action = 'store_true', help='Lists created profiles')
    parser.add_argument('-s', '--save', required = False, type = str, help='Save current config as a profile', metavar = '<name>')
    parser.add_argument('-r', '--remove', required = False, type = int, help='Remove the specified profile', metavar = '<id>')
    parser.add_argument('-a', '--apply', required = False, type = int, help='Apply the specified profile', metavar = '<id>')

    ## PARSING ARGS ##
    args = parser.parse_args()

    ## CHECKING FOR ARGUMENTS ##
    if args.list:
        check_error(list_profiles)
    elif args.save != None:
        check_error(save_profile, args.save)
    elif args.remove != None:
        check_error(remove_profile, args.remove)
    elif args.apply != None:
        check_error(apply_profile, args.apply)
    else:
        parser.print_help()


    # try:
    #     options, args = getopt.getopt(argv, 'r:s:a:hlb')

    # except getopt.GetoptError:
    #     option = argv[0]
    #     if option not in data:
    #         print(f'Konsave: unrecognised option {option}')
    #     else:
    #         print(f"Konsave: Usage- {data[option]['usage']}")

    # else:
    #     if not options:
    #         print(help_text)
    #         sys.exit(0)
    #     print(options)

        # for option, argument in options:
        #     if option in data:
        #         opt = data[option]
        #         if opt['args']['required']:
        #             if opt['args']['given_by_user']:
        #                 check_error(opt['func'], argument)
        #             else:
        #                 check_error(opt['func'], opt['args']['arg'])
        #         else:
        #             check_error(opt['func'])
            


## CALLING MAIN ##
if __name__ == '__main__':
    main()
