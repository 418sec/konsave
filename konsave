#!/usr/bin/python3
#  _   ___  __
# | | | \ \/ /      Prayag Jain | Hax Guru
# | |_| |\  /       YouTube: https://youtube.com/c/haxguru
# |  _  |/  \       GitHub: https://github.com/Prayag2
# |_| |_/_/\_\      Email: prayagjain2@gmail.com
#

## IMPORT ##
import os, shutil, argparse, configparser
from random import shuffle
from zipfile import is_zipfile, ZipFile


## GLOBAL VARIABLES ##
HOME = os.path.expandvars('$HOME')
CONFIG_DIR = os.path.join(HOME, '.config')
KONSAVE_DIR = os.path.join(CONFIG_DIR, 'konsave')
PROFILES_DIR = os.path.join(KONSAVE_DIR, 'profiles')

folder_names = ['gtk-2.0', 'gtk-3.0', 'gtk-4.0', 'Kvantum', 'latte']
file_names = ['dolphinrc', 'konsolerc', 'kcminputrc', 'kdeglobals', 'kglobalshortcutsrc', 'klipperrc', 'krunnerrc', 'kscreenlockerrc', 'ksmserverrc', 'kwinrc', 'kwinrulesrc', 'plasma-org.kde.plasma.desktop-appletsrc', 'plasmarc', 'plasmashellrc', 'gtkrc', 'gtkrc-2.0', 'lattedockrc', 'breezerc', 'oxygenrc', 'lightlyrc', 'ksplashrc']
export_extension = '.knsv'


## FUNCTIONS ##
def mkdir(path):
    '''
    Creates directory if it doesn't exist
    '''
    if not os.path.exists(path):
        os.makedirs(path)
    return path

def search_config(path, section, option):
    '''
    This function will parse config files and search for specific values
    '''
    config = configparser.ConfigParser(strict = False)
    config.read(path)
    return config[section][option]


def restart_kde():
    '''
    Restarts
    '''
    os.system('plasmashell --replace > /dev/null 2>&1 & disown')

    print("Konsave: Profile applied successfully! Please log-out and log-in to see the changes completely!")


def check_error(func, *args):
    '''
    This function runs a function and checks if there are any errors.
    '''
    try:
        f = func(*args)
    except Exception as e:
        print(f"Konsave: {e}\nTry 'konsave -h' for more info!")
    else:
        return f


def print_msg(msg):
    '''
    Makes any text a little prettier
    '''
    msg = msg[0].capitalize() + msg[1:]
    print(f"Konsave: {msg}")


def list_profiles(list_of_profiles, length_of_lop):
    '''
    Lists all the created profiles
    '''

    # assert
    assert (os.path.exists(PROFILES_DIR) and length_of_lop != 0), "No profile found."

    # run
    print("Konsave profiles:")
    print(f"ID\tNAME")
    for i, item in enumerate(list_of_profiles):
        print(f"{i+1}\t{item}")


def save_profile(name, list_of_profiles):
    '''
    Saves necessary config files in ~/.config/konsave/profiles/<name>
    '''
    
    # assert
    assert (name not in list_of_profiles), "Profile with this name already exists"

    # run
    print_msg("saving profile...")
    PROFILE_DIR = os.path.join(PROFILES_DIR, name)
    mkdir(PROFILE_DIR)
    
    for folder in folder_names:
        source = os.path.join(CONFIG_DIR, folder)
        if os.path.exists(source):
            shutil.copytree(source, f"{PROFILE_DIR}/{folder}")
    for file in file_names:
        source = os.path.join(CONFIG_DIR, file)
        if os.path.exists(source):
            shutil.copy(source, PROFILE_DIR)

    print_msg('Profile saved successfully!')


def apply_profile(id, list_of_profiles, length_of_lop):
    '''
    Applies profile of the given id
    '''
    
    # Lowering id by 1
    id -= 1

    # assert
    assert (length_of_lop != 0), "No profile saved yet."
    assert (id in range(length_of_lop)), "Profile not found :("

    # run
    name = list_of_profiles[id]
    PROFILE_DIR = os.path.join(PROFILES_DIR, name)
    shutil.copytree(PROFILE_DIR, CONFIG_DIR, dirs_exist_ok=True)
    restart_kde()


def remove_profile(id, list_of_profiles, length_of_lop):
    '''
    Removes the specified profile
    '''

    # Lowering id by 1
    id -= 1

    # assert
    assert (id in range(length_of_lop)), "Profile not found."

    # run
    item = list_of_profiles[id]
    shutil.rmtree(os.path.join(PROFILES_DIR, item))
    print_msg('removed profile successfully')


def export(id, list_of_profiles, length_of_lop):
    '''
    It will export the specified profile as a ".knsv" file in the home directory
    '''

    # lowering id by 1
    id -= 1

    # assert
    assert (id in range(length_of_lop)), "Profile not found."

    # run
    item = list_of_profiles[id]
    PROFILE_DIR = os.path.join(PROFILES_DIR, item)
    EXPORT_PATH = os.path.join(HOME, item)

    if os.path.exists(EXPORT_PATH):
        rand_str = list('abcdefg12345')
        shuffle(rand_str)
        EXPORT_PATH = EXPORT_PATH + ''.join(rand_str)

    # compressing the files as zip
    print_msg("Exporting profile. It might take a minute or two...")

    CONFIG_EXPORT_PATH = mkdir(os.path.join(EXPORT_PATH, "config"))
    PLASMA_EXPORT_PATH = mkdir(os.path.join(EXPORT_PATH, "plasma"))
    CURSOR_EXPORT_PATH = mkdir(os.path.join(EXPORT_PATH, "cursor"))
    ICON_EXPORT_PATH = mkdir(os.path.join(EXPORT_PATH, "icons"))

    # VARIABLES
    KDE_GLOBALS = os.path.join(CONFIG_DIR, 'kdeglobals')

    icon = search_config(KDE_GLOBALS, 'Icons', 'Theme')
    cursor = search_config(os.path.join(CONFIG_DIR, 'kcminputrc'), 'Mouse', 'cursorTheme')

    PLASMA_DIR = os.path.join(HOME, '.local/share/plasma')
    LOCAL_ICON_DIR = os.path.join(HOME, '.local/share/icons', icon)
    USR_ICON_DIR = os.path.join('/usr/share/icons', icon)
    LOCAL_CURSOR_DIR = os.path.join(HOME, '.icons', cursor)
    USR_CURSOR_DIR = os.path.join('/usr/share/icons', cursor)

    def check_path_and_copy(path1, path2, export_location, name):
        if os.path.exists(path1):
            shutil.copytree(path1, os.path.join(export_location, name), dirs_exist_ok=True)
        elif os.path.exists(path2):
            shutil.copytree(path2, os.path.join(export_location, name), dirs_exist_ok=True)
        else:
            print_msg(f"Couldn't find {path1} or {path2}. Skipping...")
    
    check_path_and_copy(LOCAL_ICON_DIR, USR_ICON_DIR, ICON_EXPORT_PATH, icon)
    check_path_and_copy(LOCAL_CURSOR_DIR, USR_CURSOR_DIR, CURSOR_EXPORT_PATH, cursor)
    shutil.copytree(PLASMA_DIR, PLASMA_EXPORT_PATH, dirs_exist_ok=True)
    shutil.copytree(PROFILE_DIR, CONFIG_EXPORT_PATH, dirs_exist_ok=True)

    shutil.make_archive(EXPORT_PATH, 'zip', EXPORT_PATH)
    shutil.rmtree(EXPORT_PATH)
    shutil.move(EXPORT_PATH + '.zip', EXPORT_PATH + export_extension)

    print_msg(f"Successfully exported to {EXPORT_PATH}{export_extension}")


def import_profile(path):
    '''
    This will import an exported profile
    '''
    
    # assert
    assert (is_zipfile(path) and path[-5:] == export_extension), "Not a valid konsave file"

    item = os.path.basename(path)[:-5]
    
    assert (not os.path.exists(os.path.join(PROFILES_DIR, item))), "A profile with this name already exists"

    # run

    print_msg("Importing profile. It might take a minute or two...")

    item = os.path.basename(path).replace(export_extension, '')

    TEMP_PATH = os.path.join(KONSAVE_DIR, 'temp', item)

    with ZipFile(path, 'r') as zip:
        zip.extractall(TEMP_PATH)

    CONFIG_IMPORT_PATH = os.path.join(TEMP_PATH, 'config')
    PLASMA_IMPORT_PATH = os.path.join(TEMP_PATH, 'plasma')
    ICON_IMPORT_PATH = os.path.join(TEMP_PATH, 'icons')
    CURSOR_IMPORT_PATH = os.path.join(TEMP_PATH, 'cursor')

    PLASMA_DIR = os.path.join(HOME, '.local/share/plasma')
    LOCAL_ICON_DIR = os.path.join(HOME, '.local/share/icons')
    LOCAL_CURSOR_DIR = os.path.join(HOME, '.icons')
    PROFILE_DIR = os.path.join(PROFILES_DIR, item)

    print()
    shutil.copytree(CONFIG_IMPORT_PATH, PROFILE_DIR, dirs_exist_ok=True)
    shutil.copytree(PLASMA_IMPORT_PATH, PLASMA_DIR, dirs_exist_ok=True)
    shutil.copytree(ICON_IMPORT_PATH, LOCAL_ICON_DIR, dirs_exist_ok=True)
    shutil.copytree(CURSOR_IMPORT_PATH, LOCAL_CURSOR_DIR, dirs_exist_ok=True)
    
    shutil.rmtree(TEMP_PATH)

    print_msg("Profile successfully imported!")


## MAIN ##
def main():

    ## VARIABLES ##
    mkdir(PROFILES_DIR)
    list_of_profiles = os.listdir(PROFILES_DIR)
    length_of_lop = len(list_of_profiles)


    ## PARSER SETTINGS ##
    parser = argparse.ArgumentParser(
        prog = 'Konsave',
        epilog = "Please report bugs at https://www.github.com/prayag2/konsave"
    )

    ## ADDING ARGS ##
    parser.add_argument('-l', '--list', required = False, action = 'store_true', help='Lists created profiles')
    parser.add_argument('-s', '--save', required = False, type = str, help='Save current config as a profile', metavar = '<name>')
    parser.add_argument('-r', '--remove', required = False, type = int, help='Remove the specified profile', metavar = '<id>')
    parser.add_argument('-a', '--apply', required = False, type = int, help='Apply the specified profile', metavar = '<id>')
    parser.add_argument('-e', '--export-profile', required = False, type = int, help='Export a profile and share with your friends!', metavar = '<id>')
    parser.add_argument('-i', '--import-profile', required = False, type = str, help='Import a konsave file', metavar = '<path>')

    ## PARSING ARGS ##
    args = parser.parse_args()

    ## CHECKING FOR ARGUMENTS ##
    if args.list:
        check_error(list_profiles, list_of_profiles, length_of_lop)
    elif args.save != None:
        check_error(save_profile, args.save, list_of_profiles)
    elif args.remove != None:
        check_error(remove_profile, args.remove, list_of_profiles, length_of_lop)
    elif args.apply != None:
        check_error(apply_profile, args.apply, list_of_profiles, length_of_lop)
    elif args.export_profile != None:
        check_error(export, args.export_profile, list_of_profiles, length_of_lop)
    elif args.import_profile != None:
        check_error(import_profile, args.import_profile)
    else:
        parser.print_help()
            


## CALLING MAIN ##
if __name__ == '__main__':
    main()
